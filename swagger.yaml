openapi: 3.0.0
info:
  title: Auth API
  version: 1.0.0
  description: API for user authentication and management

tags:
  - name: auth
    description: Authentication related operations
  - name: batch
    description: Batch related operations
  - name: course
    description: Course related operations
  - name: class
    description: Class related operations
  - name: admin
    description: Admin related operations

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserInput:  # Reusable schema for user input
      type: object
      required:
        - name
        - email
        - phoneNumber
      properties:
        name:
          type: string
          description: User's name
        email:
          type: string
          format: email
          description: User's email address
        phoneNumber:
          type: string
          description: User's phone number
    UserWithRoleInput: # Extends UserInput for create-user
      allOf:
        - $ref: '#/components/schemas/UserInput'
        - type: object
          required:
            - role
          properties:
            role:
              type: string
              enum: [admin, sub-admin, owner, teacher]
              description: User's role
    AuthResponse: # Reusable for successful auth responses (e.g., register, create-user)
      type: object
      properties:
        message:
          type: string
          description: Success message
    LoginRequest:
      type: object
      required:
        - email
        - otp
        - deviceType
      properties:
        email:
          type: string
          format: email
          description: User's email address
        otp:
          type: string
          description: One-time password
        deviceType:
          type: string
          description: Type of device used for login
    LoginResponse:
      type: object
      properties:
        authToken:
          type: string
          description: Authentication token
    OTPRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: User's email address
    PhoneNumberRequest:
       type: object
       required:
         - phoneNumber
       properties:
         phoneNumber:
           type: string
           description: User's phone number

    BatchInput:
      type: object
      required:
        - batch_name
        - description
      properties:
        batch_name:
          type: string
          description: Name of the batch
        description:
          type: string
          description: Description of the batch
    BatchResponse: # Reusable for batch responses
       type: object
       properties:
         batch_id:
           type: string
           description: Unique ID of the batch
         teacher_email:
           type: string
           format: email
           description: Email of the teacher creating the batch
         batch_name:
           type: string
           description: Name of the batch
         description:
           type: string
           description: Description of the batch

    CourseInput:
      type: object
      required:
        - batch_id
        - course_name
        - allow_notes_download
      properties:
        batch_id:
          type: string
          description: ID of the batch
        course_name:
          type: string
          description: Name of the course
        allow_notes_download:
          type: boolean
          description: Whether notes download is allowed
    CourseResponse:
       type: object
       properties:
         course_id:
           type: string
           description: Unique ID of the course
         teacher_id:
           type: string
           description: ID of the teacher
         batch_id:
           type: string
           description: ID of the batch
         course_name:
           type: string
           description: Name of the course
         allow_notes_download:
           type: boolean
           description: Whether notes download is allowed

    ClassInput:
      type: object
      required:
        - course_id
        - class_title
        - class_date_time
      properties:
        course_id:
          type: string
          description: ID of the course
        class_title:
          type: string
          description: Title of the class
        class_date_time:
          type: string
          format: date-time
          description: Date and time of the class
        recording_url:
          type: string
          description: URL of the recording (optional)
    ClassResponse:
       type: object
       properties:
         class_id:
           type: string
           description: Unique ID of the class
         teacher_id:
           type: string
           description: ID of the teacher
         course_id:
           type: string
           description: ID of the course
         class_title:
           type: string
           description: Title of the class
         class_date_time:
           type: string
           format: date-time
           description: Date and time of the class
         recording_url:
           type: string
           description: URL of the recording (optional)

    UserAssignment:
      type: object
      required:
        - entityType
        - entity_id
        - user
      properties:
        entityType:
          type: string
          enum: [batch, course]
        entity_id:
          type: string
        user:
          type: string

    MultipleUserAssignment:
      type: object
      required:
        - entityType
        - entity_id
        - users
      properties:
        entityType:
          type: string
          enum: [batch, course]
        entity_id:
          type: string
        users:
          type: array
          items:
            type: string

    BulkUserAssignment:
      type: object
      required:
        - entityType
        - entityUsers
      properties:
        entityType:
          type: string
          enum: [batch, course]
        entityUsers:
          type: array
          items:
            type: object
            required:
              - entity_id
              - users
            properties:
              entity_id:
                type: string
              users:
                type: array
                items:
                  type: string

    MessageResponse:
      type: object
      properties:
        message:
          type: string
          example: "Success message here."


paths:
  # ... (All paths defined below using the reusable components)

  /api/auth/register:
    post:
      tags:
        - auth
      summary: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: User already exists or invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /api/auth/create-user:
    post:
      tags:
        - auth
      security:
        - BearerAuth: []
      summary: Create a user with a specific role
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserWithRoleInput'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: User already exists or invalid role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /api/auth/login:
    post:
      tags:
        - auth
      summary: Login with email and OTP
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'

      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid email or OTP or OTP expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /api/auth/send-login-otp:
    post:
      tags:
        - auth
      summary: Send OTP for login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneNumberRequest'
      responses:
        '200':
          description: OTP sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OTPRequest'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /api/auth/logout:
    post:
      tags:
        - auth
      summary: Logout user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest' # Reuse LoginRequest as it has the required fields
      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /api/otp/send:
    post:
      tags:
        - auth
      summary: Send OTP for email verification
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OTPRequest'
      responses:
        '200':
          description: OTP sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Email is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Failed to send OTP or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /api/otp/verify:
    post:
      tags:
        - auth
      summary: Verify email OTP
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest' # Reuse LoginRequest as it has the required fields
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Email and OTP are required or OTP has expired or invalid OTP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /api/user/update:
    put:
      tags:
        - auth
      summary: Update user details
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput' # Could create a separate schema if different fields are updatable.
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      security:
        - BearerAuth: []

  /api/user/delete:
    delete:
      tags:
        - auth
      summary: Delete user
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      security:
        - BearerAuth: []

  /api/user/{email}:
    get:
      tags:
        - auth
      summary: Get user details by email
      parameters:
        - in: path
          name: email
          schema:
            type: string
            format: email
          required: true
          description: User's email address
      responses:
        '200':
          description: User details retrieved successfully
          # You would likely have a User schema here to define the user details
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      security:
        - BearerAuth: []

  /api/batch:
    post:
      tags:
        - batch
      summary: Create a new batch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchInput'
      responses:
        '201':
          description: Batch created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponse'
        '500':
          description: Failed to create batch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      security:
        - BearerAuth: []
    get:
      tags:
        - batch
      summary: Get all batches
      responses:
        '200':
          description: List of batches
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BatchResponse'
        '500':
          description: Failed to get all batches
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /api/batch/{batch_id}:
    get:
      tags:
        - batch
      summary: Get a batch by ID
      parameters:
        - in: path
          name: batch_id
          schema:
            type: string
          required: true
          description: ID of the batch
      responses:
        '200':
          description: Batch details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponse'
        '404':
          description: Batch not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Failed to get batch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
    put:
      tags:
        - batch
      summary: Update a batch
      parameters:
        - in: path
          name: batch_id
          schema:
            type: string
          required: true
          description: ID of the batch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchInput' #  Allow partial updates by not requiring all fields.
      responses:
        '200':
          description: Batch updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponse'
        '500':
          description: Failed to update batch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      security:
        - Bearer
    delete:
      tags:
        - batch
      summary: Delete a batch
      parameters:
        - in: path
          name: batch_id
          schema:
            type: string
          required: true
          description: ID of the batch
      responses:
        '204':
          description: Batch deleted successfully
        '500':
          description: Failed to delete batch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      security:
        - BearerAuth: []

  /api/course:
    post:
      tags:
        - course
      summary: Create a new course
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseInput'
      responses:
        '201':
          description: Course created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'
        '500':
          description: Failed to create course
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      security:
        - BearerAuth: []

  /api/course/{course_id}:
    get:
      tags:
        - course
      summary: Get a course by ID
      parameters:
        - in: path
          name: course_id
          schema:
            type: string
          required: true
          description: ID of the course
      responses:
        '200':
          description: Course details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Failed to get course
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
    put:
      tags:
        - course
      summary: Update a course
      parameters:
        - in: path
          name: course_id
          schema:
            type: string
          required: true
          description: ID of the course
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseInput' # Allow partial updates
      responses:
        '200':
          description: Course updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'
        '500':
          description: Failed to update course
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      security:
        - BearerAuth: []
    delete:
      tags:
        - course
      summary: Delete a course
      parameters:
        - in: path
          name: course_id
          schema:
            type: string
          required: true
          description: ID of the course
      responses:
        '204':
          description: Course deleted successfully
        '500':
          description: Failed to delete course
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      security:
        - BearerAuth: []

  /api/course/batch/{batch_id}:
    get:
      tags:
        - course
      summary: Get courses by batch ID
      parameters:
        - in: path
          name: batch_id
          schema:
            type: string
          required: true
          description: ID of the batch
      responses:
        '200':
          description: List of courses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseResponse'
        '500':
          description: Failed to get courses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /api/class:
    post:
      tags:
        - class
      summary: Create a new class
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassInput'
      responses:
        '201':
          description: Class created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassResponse'
        '500':
          description: Failed to create class
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      security:
        - BearerAuth: []

  /api/class/{class_id}:
    get:
      tags:
        - class
      summary: Get a class by ID
      parameters:
        - in: path
          name: class_id
          schema:
            type: string
          required: true
          description: ID of the class
      responses:
        '200':
          description: Class details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassResponse'
        '404':
          description: Class not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Failed to get class
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
    put:
      tags:
        - class
      summary: Update a class
      parameters:
        - in: path
          name: class_id
          schema:
            type: string
          required: true
          description: ID of the class
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassInput' # Allow partial updates
      responses:
        '200':
          description: Class updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassResponse'
        '500':
          description: Failed to update class
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      security:
        - BearerAuth: []
    delete:
      tags:
        - class
      summary: Delete a class
      parameters:
        - in: path
          name: class_id
          schema:
            type: string
          required: true
          description: ID of the class
      responses:
        '204':
          description: Class deleted successfully
        '500':
          description: Failed to delete class
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      security:
        - BearerAuth: []

  /api/class/course/{course_id}:
    get:
      tags:
        - class
      summary: Get classes by course ID
      parameters:
        - in: path
          name: course_id
          schema:
            type: string
          required: true
          description: ID of the course
      responses:
        '200':
          description: List of classes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClassResponse'
        '500':
          description: Failed to get classes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /admin/assignUserToEntity:
    post:
      summary: Assign a single user to a batch or course
      operationId: assignUserToEntity
      tags:
        - admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAssignment'
      responses:
        '200':
          description: User successfully assigned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Missing or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /admin/assignUsersToEntity:
    post:
      summary: Assign multiple users to a batch or course
      operationId: assignUsersToEntity
      tags:
        - admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultipleUserAssignment'
      responses:
        '200':
          description: Users successfully assigned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Missing or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /admin/bulkAssignUsersToEntities:
    post:
      summary: Bulk assign users to multiple batches or courses
      operationId: bulkAssignUsersToEntities
      tags:
        - admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkUserAssignment'
      responses:
        '200':
          description: Users successfully bulk assigned to entities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Missing or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        