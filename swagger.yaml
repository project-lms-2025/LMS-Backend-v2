openapi: 3.0.0
info:
  title: Node.js DynamoDB Server API
  version: 1.0.0
tags:
  - name: auth
    description: Authentication related operations (login, register, etc.)
  - name: user
    description: User related operations (update, delete, etc.)
  - name: otp
    description: OTP related operations (send, verify, etc.)
paths:
  # Auth routes
  /api/auth/register:
    post:
      tags:
        - auth
      summary: Register a new user
      description: Allows users to register by providing personal information, academic details, and uploading documents.
      operationId: registerUser
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                  description: Full name of the user.
                email:
                  type: string
                  format: email
                  example: user@example.com
                  description: Email address of the user.
                password:
                  type: string
                  example: yourPassword123
                  description: The password chosen by the user.
                gender:
                  type: string
                  enum: [Male, Female, Other]
                  example: Male
                  description: The gender of the user.
                phoneNumber:
                  type: string
                  example: "+1234567890"
                  description: The user's phone number.
                dob:
                  type: string
                  format: date
                  example: "2000-01-01"
                  description: The user's date of birth.
                is_email_verified:
                  type: boolean
                  example: false
                  description: Whether the user's email is verified.
                address:
                  type: string
                  example: 123 Main St, ABC City
                  description: Residential address of the user.
                pincode:
                  type: string
                  example: 123456
                  description: Postal code of the user's address.
                state:
                  type: string
                  example: State A
                  description: The state the user resides in.
                marks10:
                  type: integer
                  example: 85
                  description: Marks obtained in 10th grade.
                marks12:
                  type: integer
                  example: 90
                  description: Marks obtained in 12th grade.
                higherDegreeScore:
                  type: integer
                  example: 88
                  description: Marks/score obtained in higher degree (e.g., Bachelor's degree).
                previousYearScore:
                  type: integer
                  example: 92
                  description: Marks obtained in the previous year.
                examRegisteredFor:
                  type: string
                  example: GATE CS
                  description: The exam the user is registered for (e.g., GATE CS).
                profilePicture:
                  type: string
                  format: binary
                  description: The user's profile picture in JPEG or PNG format.
                pdf10th:
                  type: string
                  format: binary
                  description: PDF document of the user's 10th grade certificate.
                pdf12th:
                  type: string
                  format: binary
                  description: PDF document of the user's 12th grade certificate.
                pdfHigherDegrees:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: One or more PDF documents of the user's higher degree certificates.
                pdfPreviousYear:
                  type: string
                  format: binary
                  description: PDF document of the user's previous year certificate.
      responses:
        '200':
          description: User registered successfully
        '400':
          description: Bad request, missing or invalid data
        '500':
          description: Internal server error

  /api/auth/login:
    post:
      tags:
        - auth
      summary: Login a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Logged in successfully
        '400':
          description: Invalid credentials
        '500':
          description: Internal server error

  /api/auth/logout:
    post:
      tags:
        - auth
      summary: Logout a user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logged out successfully
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /api/auth/forgot-password:
    post:
      tags:
        - auth
      summary: Request password reset
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Password reset email sent
        '400':
          description: Missing email or invalid input
        '500':
          description: Internal server error

  /api/auth/reset-password:
    post:
      tags:
        - auth
      summary: Reset password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resetToken:
                  type: string
                newPassword:
                  type: string
      responses:
        '200':
          description: Password reset successfully
        '400':
          description: Missing reset token or new password
        '500':
          description: Internal server error

  # OTP routes
  /api/otp/send:
    post:
      tags:
        - otp
      summary: Send OTP to the user's email for verification
      description: This endpoint sends an OTP to the provided email address for email verification.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
              required:
                - email
      responses:
        '200':
          description: OTP sent successfully
        '400':
          description: Missing email or invalid input
        '500':
          description: Internal server error

  /api/otp/verify:
    post:
      tags:
        - otp
      summary: Verify the OTP entered by the user
      description: This endpoint verifies the OTP entered by the user for email verification.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                otp:
                  type: string
                  example: "123456"
              required:
                - email
                - otp
      responses:
        '200':
          description: Email verified successfully
        '400':
          description: Invalid OTP or OTP expired
        '500':
          description: Internal server error

  # User routes
  /api/user/update:
    put:
      tags:
        - user
      summary: Update user details
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Bad request, missing or invalid data
        '500':
          description: Internal server error

  /api/user/delete:
    delete:
      tags:
        - user
      summary: Delete user account
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User deleted successfully
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /api/user/{email}:
    get:
      tags:
        - user
      summary: Get user details
      description: Fetches the user details from the LMS-AUTH, LMS-USER-DATA, and LMS-USER-DOCS tables based on the provided email.
      parameters:
        - name: email
          in: path
          required: true
          description: The email of the user to fetch data for.
          schema:
            type: string
            example: "test@example.com"
      responses:
        '200':
          description: Successful response with user data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    example: "test@example.com"
                  authData:
                    type: object
                    example: { "email": "test@example.com" }
                  userData:
                    type: object
                    example: { "email": "test@example.com" }
                  userDocs:
                    type: object
                    example: { "email": "test@example.com" }
        '400':
          description: Invalid email format or missing email.
        '404':
          description: User not found in any of the tables.
        '500':
          description: Internal server error or error fetching user data.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT